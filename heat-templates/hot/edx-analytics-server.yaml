# This template defines an Open edX analytics server.
#
heat_template_version: 2016-04-08

description: >
  Open edX analytics server

parameters:
  name:
    type: string
    description: Name of the server
  image:
    type: string
    description: >
      Image ID or name.
      Should be a distribution platform supported for Open edX.
    default: ubuntu-14.04-server-cloudimg
  flavor:
    type: string
    description: Flavor to use for app servers
    default: m1.large
  ip:
    type: string
    description: IP used by the server
    default: 192.168.122.120
  network:
    type: string
    description: Private network used by the server
  public_net_id:
    type: string
    description: Public network ID
  security_group:
    type: string
    description: Security group used by the server
  key_name:
    type: string
    description: >
      SSH key name for authentication, to be injected into the server
      for the default user
  timeout:
    type: number
    description: Stack creation timeout (seconds)
    default: 900
  hadoop_size:
    type: string
    description: Size of Hadoop volume
    default: 10

resources:
  # server_done: Wait condition to signal that the server has completed its
  # installation.
  server_done:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: server_done_handle}
      count: 1
      timeout: {get_param: timeout}

  server_done_handle:
    type: OS::Heat::WaitConditionHandle

  # common_config_part: cloud-init configuration common to all nodes
  common_config_part:
    type: OS::Heat::SoftwareConfig
    properties:
      config: { get_file: ../cloud-config/common.yaml }

  hosts_config_part:
    type: OS::Heat::SoftwareConfig
    properties:
      config: { get_file: ../cloud-config/hosts.yaml }

  # server_config_part: cloud-init configuration specific to this server
  server_config_part:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        packages:
          - xfsprogs
        runcmd:
          # Create volume filesystems and fstab entries
          # (waiting for volume attachments to be hot-plugged into the
          # VM)
          - mkdir -pv /edx/var/hadoop
          - echo "/dev/vdb /edx/var/hadoop xfs defaults 1 2" >> /etc/fstab
          - >
            while [ ! -e /dev/vdb ]; do
              sleep 5;
            done
          - >
            if ! mount /edx/var/hadoop; then
              mkfs.xfs /dev/vdb && mount /edx/var/hadoop;
            fi
          - { get_attr: ['server_done_handle', 'curl_cli'] }

  # server_cloud_config: complete cloud-init configuration for this servers.
  #
  # Installs several packages needed for bootstrapping Open edX.
  # At the end of the cloud-init sequence, invokes the wait condition
  # callback to signal to the calling stack that server creation is
  # complete.
  server_cloud_config:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: common_config_part}
        - config: {get_resource: hosts_config_part}
        - config: {get_resource: server_config_part}

  # server: an application server instance
  #
  # Creates a new Nova VM with the appropriate flavor and
  # image. Injects the configured SSH key for the default user,
  # applies the cloud-init configuration, and plugs the VM into the
  # correct network using the correct security group.
  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      user_data: { get_resource: server_cloud_config }
      user_data_format: RAW
      networks:
        - port: { get_resource: management_port }
      block_device_mapping:
        - "device_name": "vdb"
          "volume_id": { get_resource: hadoop_data }
          delete_on_termination: false

  # management_port: the server's network port in the management
  # network
  management_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: network }
      security_groups:
        - { get_param: security_group }
      fixed_ips:
        - ip_address: { get_param: ip }

  # floating_ip: floating IP address for the server
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: management_port }

  # hadoop_data: persistent storage volume for Hadoop data
  hadoop_data:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: hadoop_size }

outputs:
  OS::stack_id:
    value: { get_resource: server }
  server_ip:
    description: Server's private IP address
    value: { get_attr: [ server, first_address ] }
  public_ip:
    description: Server's public IP address
    value: { get_attr: [ floating_ip, floating_ip_address ] }
