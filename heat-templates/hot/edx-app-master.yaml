# This template defines an Open edX master application server.  It creates a
# Nova instance of the defined flavor.  It is ephemeral and uses no persistent
# storage.  It is meant to be created on demand, in the same stack where it is
# to be configured.
heat_template_version: 2015-04-30

description: >
  Open edX application master server

parameters:
  name:
    type: string
    description: Name of the server
  image:
    type: string
    description: >
      Image ID or name.
      Should be a distribution platform supported for Open edX.
    default: ubuntu-14.04-server-cloudimg
  flavor:
    type: string
    description: Flavor to use for app servers
    default: m1.large
  network:
    type: string
    description: Network used by the server
  security_group:
    type: string
    description: Security group used by the server
  key_name:
    type: string
    description: >
      SSH key name for authentication, to be injected into the server
      for the default user
  timeout:
    type: number
    description: Stack creation timeout (seconds)
    default: 900

resources:
  # all_done: Wait condition to signal that the server has completed its
  # installation.
  server_done:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: server_done_handle}
      count: 1
      timeout: {get_param: timeout}

  server_done_handle:
    type: OS::Heat::WaitConditionHandle

  # common_config_part: cloud-init configuration common to all nodes
  common_config_part:
    type: OS::Heat::SoftwareConfig
    properties:
      config: { get_file: ../cloud-config/common.yaml }

  hosts_config_part:
    type: OS::Heat::SoftwareConfig
    properties:
      config: { get_file: ../cloud-config/hosts.yaml }

  # server_config_part: cloud-init configuration specific to this server
  server_config_part:
    type: "OS::Heat::CloudConfig"
    properties:
      cloud_config:
        merge_how: 'dict(recurse_array,no_replace)+list(append)'
        runcmd:
          - { get_attr: ['server_done_handle', 'curl_cli'] }

  # server_cloud_config: complete cloud-init configuration for this servers.
  #
  # Installs several packages needed for bootstrapping Open edX.
  # At the end of the cloud-init sequence, invokes the wait condition
  # callback to signal to the calling stack that server creation is
  # complete.
  server_cloud_config:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: common_config_part}
        - config: {get_resource: hosts_config_part}
        - config: {get_resource: server_config_part}

  # server: an application server instance
  #
  # Creates a new Nova VM with the appropriate flavor and
  # image. Injects the configured SSH key for the default user,
  # applies the cloud-init configuration, and plugs the VM into the
  # correct network using the correct security group.
  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: name }
      flavor: { get_param: flavor }
      image: { get_param: image }
      key_name: { get_param: key_name }
      user_data: { get_resource: server_cloud_config }
      user_data_format: RAW
      networks: [ { network: { get_param: network } } ]
      security_groups: [ { get_param: security_group } ]

outputs:
  OS::stack_id:
    value: { get_resource: server }
  server_ip:
    description: "Server's private IP address"
    value: { get_attr: [ server, first_address ] }
